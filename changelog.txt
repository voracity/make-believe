R4 (2014-12-20)
...
R5 (2015-01-03)
- Use node labels (genie: names) when available
- Simple moving nodes (needs much more improvement)
R6
- Backend rewrite to remove dependencies on .xdsl format for BN representation and display
- Extremely experimental .xdsl saving (basic networks only)
R7
- Added experimental worker threads (currently worse perf)
R16
- Right click/context menu triggers CPT dialog
R17
- Fixed entering evidence in first state (should have been 'if undefined' not 'if 0')
- TESTING: Created testing file (makeBelieveTests.js), and added an initial test
- TESTING: Added click-to-update test. Accuracy may be an issue for reproducibility
- TESTING: Added running tests to debug menu
- For very small iterations, worker threads > iterations. Fixed to handle this properly
- Auto-layout is now animated. (Using a slow method --- can be much faster.)
- Auto-layout animation with faster method. :)
- Added a label-only view
- Fixed: [bug] auto-layout, switching between distro/label view sometimes causes arrows to disappear
- Prompt for node delete (in future, undo/redo makes this redundant/undesirable)
- Allowed viewing of equation node definitions
- Allowed setting the equation node definitions (with no validation)
- Added comment reading/viewing from .xdsl file
- Allow changing text in comments
- Save comment to .xdsl file
- Fixed decision network evaluation bustage (broken since had switched to worker threads as default)
- TESTING: Added a simple regression test for decision networks
- Very preliminary add node capability (backend only)
- Arc weights based on % mutual info for children
R18
- Fixed worker-based inference, when changes have been made to network
- Support for .dne comments
- Fixed menu markers
- Added support for node colours and formats
	- Read in from .xdsl files
	- Fix editing of formatting controls
	- Save format changes to .xdsl file
	- Added a simple regression test (requires visual verification)
- Probability of Evidence (simple, slow version)
- Added support for the same function-form logical operators as GeNIe (And, Or, etc.). No "Not", because there's none in GeNIe.
- Support for further functions (arithmetic)
R19
- Initial group support
	- Show only nodes from currently focused group
	- Show node for submodel, with arcs
	- Allow submodel navigation
	- Allow moving with submodel
	- |display()| function clean up
	- Fixed up pathsIn/pathsOut to store information as objects rather than arrays
	- Delete now working again
- Context menus supported (minimally) on utility and decision nodes now
R20
- Can (properly) flatten a network with submodels (but this is a non-reversible change, rather than a different view)
- Can move nodes from one submodel to another, by changing it's 'path'
- Made 'type' visible on context menu (need to make changeable ... somehow)
- Added 'label' to the context menu
- Made context menus available on submodels
- Possible to change ID and label on submodel nodes
- Code: .submodelPath vs .path (the latter includes id of the submodel itself). Eliminated .path
- Can view submodel path, and move submodels to different submodels from context menu
- Show arc strengths fixed, and can be used with BNs containing submodels (I'm not clear that the approach I've chosen is sensible, though, which is sum(mi)/sum(child-entropies) for all applicable paths)
- FIXED: Significant contextmenu dialog duplication. PART FIXED: Now fix node context menu
- FIXED: Continuous nodes/networks seem to have broken.
- FIXED: .dne support broken
R21
- Added bars (bar graphs) to CPT cell background
- Changed CPTs to display 'chances'
- Check for valid CPT on change
- API: Allow adding states
- API: Allow deleting states
- API: Allow renaming states
- API: Centralise new Node/addNode code
- Can rename states from CPT context menu
R22
- Small improvement to CPTs (state name overflow, fixed width columns)
- Add support for textboxes
- Allow textboxes to be moved (initial)
- API: Fair bit of work to get something working in node.js. Requires 'npm install cheerio'.
- API: Created apiTest.js for API examples/testing. Run as 'node apiTest.js'.
R23
- Add editing for function tables (deterministic/discrete and utility nodes)
	- Add drop-down for function tables, rather than state number
- Added Network -> Clear Evidence to clear all evidence
- Handle node type changes
	- Can switch between nature and decision (need to update GUI dialog)
	- Allow switching between nature/decision and utility
	- Handle dangling utility children
	- Test switching between all 3
- Added deterministic example BN (Logical Gates.xdsl)
R24
- API: Use hybrid jQuery interface object.setXXX() (returning this) and object.XXX for gets
- API: Auto-generate setXXX methods for all properties, to allow/enforce jQuery-style chaining with setXXX()
- API: D-connected methods: areNodesDConnected (tests if two nodes are d-connected) and findAllDConnectedNodes (finds all nodes that are d-connected to a given node). In addition, there is isConnectedPath (tests if a single path is connected) and findAllPathsBetweenNodes
- GUI support for finding d-connected nodes
R25**
- Rewrote d-connected methods. Created much faster method, and one that is simpler/more robust.
- Give option for setting time limit for computations, in addition to iteration limit
	- Provided impl. Now clean up and add UI
	- Add report in status bar on how many iterations were run for last inference
- Handle node type changes
	- Add 'Nature - Chance' and 'Nature - Deterministic' (or otherwise handle deterministic in some way)
		- Reorganise CPT/Func Table/etc. tabs into 'Definition', with changeable types
			- Add a proper definitionType field to node
			- Changing between cpt/funcTable works (now funcText sort of, but badly).
			- Need to avoid committing change until user clicks 'Save'
				- Switching between cpt/funcTable works without saving, until clicking save.
					- Fixed: Switching from Prob Table to Deterministic and back to Prob Table loses the original CPT
					- Fixed: Switching equation -> CPT should give uniform CPT by default
	- Fixed: .dnes
- Added key shortcuts to normalize (F1) and overwrite current with remainder (F2)
- Typing '.' at the end of a cpt prob advances automatically to next cpt cell
- Typing '1' and changing the cell of a cpt auto-sets all other entries to 0
- Added snapping and alignment indicators when moving nodes/submodels
- Added getItems(), fixed getAllItems() to include display items (mainly just textboxes)
- Add and delete states
	- Fixed: Context menu does add state on duplicate node (need to copy to original when click 'Save')
	- Child definitions need to be updated 
		- CPT children
			- Add State: Set new states to uniform (we can do better eventually...)
			- Delete State
		- FuncTable children
			(have created setInitialDefinition(), to reset any node def to an "initial state")
			- Add State
			- Delete State
		- Equation children (well, we're going to treat this as just working)
- Added drag/drop opening of files
- Nodes resize when entering evidence
- Initial keyboard shortcut support
	- Add shortcut labels to menu (or tooltips?)
	- Create a help popup with all current/default shortcuts
- Initial undo/redo support (very experimental)
- Added proper intersection calculations for boxes with rounded borders (in celebration, I made borders very much rounder)
- Add/remove parents/children
	- Add to list of parents/children (done)
	- Update CPTs
		(Add/remove parent states) - done
		(Add parent) - done
		(Remove parent) - done
		(Test and clean up)
			- Adding and removing states in the same go doesn't work (e.g. + then - causes new state name to be ignored)
				- More testing needed...
				- Create regression tests
	- GUI for adding parents/children
		- Need to reconsider the double-click drag, because doesn't work with a touchpad (Can toggle double-click/single-click drag for now, because there's no way to handle touchpad limitations well)
			- Add a preference for toggling double-click/single-click to add arc
		- Add arc to canvas when dragging (without node at end)
		- Drag left/bottom makes child, drag right/up makes parent
- Add Naive Bayes learner
- Add TAN structure learner
- Add moveStates function
	- Update child CPTs (chose to do this using generic method, rather than a specialised one.
		Probably slower, but probably more robust.)
- FIXED: '+Add State' gui button can produce NaN in interface. Need to update belief vector size, I think (not sure why this used to work)
- Handle saving of different evidence scenarios to network
	- Allow removal of saved scenarios (With 'del' key)
- Save stored scenarios when saving the network
- Style comment in node context dialog
- Added description editing
- Save submodels
- Double-click anywhere to bring up add node/text/etc. menu (instead of making new node)
- Double-click to edit text-box, blur/click elsewhere to go back to view mode and save the text
- Creating nodes
	- Double click to add node to canvas (done)
	- By default, highlight node title/id for editing
	- On double-clicking title (to edit it), tab should cycle through state names for editing (incl. Shift-Tab to reverse back)
		- Working, but I wouldn't trust it very much!
		- Have a bad way of making sure only one node is being actively edited. Fix this.
	- Shift-Enter to add state
		- Need to do Ctrl-Shift-Enter to add state before
		- Need to implement undo()
	- Move up/down through states & title using Up/Down
	- Move state up/down using Ctrl-Up/Down (using moveStates function)
	- Move state using Ctrl-Left/Right in CPT dialog (punted on trying to execute when clicking 'save',
		so it executes immediately; there's no data loss, so no big deal, but might be slow on large CPTs/child CPTs)
	- Control-Del to delete state (undo is buggy, but that's true with almost all undoable actions)
- Definition classes
	- Create definition placeholder
	- Start moving functionality into definition placeholder
	- Convert everything to using def's (load_xdsl/load_dne/new node mostly done)
	- There are some tangling issues between Node and Definitions. Not 100% sure how best to handle.
		- Node, States (state spaces) and Definitions (Relations) are all different concepts now
	- Make addStates work (duplicate, duplicateLocal, updateDefinition, etc.)
	- CPT working, now CDT
	- Make removeStates work
		- Remove states not working properly
		- Test
	- .dne load has weird issue where inference is correct, but def.cpt is just uniform
	- Test
	- Make moveStates work
	- Fix setDefinitionType
	- Fix setUtilities, setFuncTable, setEquation, cpt1d, randomizeCpt, normalizeCpt
	- Fix setType
	- Make the regression tests work again (originally 1/5, now 2/5, now 5/5. Woohoo!)
		- Switch over the regression test code to async/await
	- Node props dialog not working for everything (may be fixed. Check)
	- Remove every non-def line of code
- Make definition a subobject of node (a bit like node.format)
- Rename node and state names (content editable? done in context menu)
- Undo for moving nodes
	- Created a |moveTo| gui & api function
- BN update bug on undo (i.e. doesn't compile/belief update) --- actually a removeparents bug
- Fixed some dramatic inefficiences on first load/continuous networks
- Need to relayout arcs, when changing node/state labels inline
- Undo add/delete node
	- Have a possible implementation for both. For deletes, I save the node and child CPTs, and then restore it
	- Test --- delete currently broken, when redoing.
- Rename bn.displayItems to bn.basicItems
- Submodel/textBox editing
	(Lot's of things missing I didn't realise, like delete textbox/submodel!)
	- Delete submodel
	- guiDelete submodel
		- updateArcs needs to work with submodels
		- more checking needed
	- guiAdd submodel (partially there)
	- guiAdd/Delete textboxes
	- textbox properties
	- textbox resizing (simple)
- Implement Junction Tree
	- Implement factors
		- Convert CPT to factor
		- Multiply factors
		- Marginalize
		- Reduce (given evidence)
		- Normalize to produce prob vector
